--- 
scopeName: source.ruby.rspec.cucumber.steps
name: Cucumber Steps
keyEquivalent: ^~C
repository: 
  regex_sub: 
    patterns: 
    - include: "#interpolated_ruby"
    - include: "#escaped_char"
    - name: string.regexp.arbitrary-repitition.ruby
      captures: 
        "1": 
          name: punctuation.definition.arbitrary-repitition.ruby
        "3": 
          name: punctuation.definition.arbitrary-repitition.ruby
      match: (\{)\d+(,\d+)?(\})
    - name: string.regexp.character-class.ruby
      begin: \[(?:\^?\])?
      captures: 
        "0": 
          name: punctuation.definition.character-class.ruby
      end: \]
      patterns: 
      - include: "#escaped_char"
    - name: string.regexp.group.ruby
      begin: \(
      captures: 
        "0": 
          name: punctuation.definition.group.ruby
      end: \)
      patterns: 
      - include: "#regex_sub"
    - name: comment.line.number-sign.ruby
      comment: We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.
      captures: 
        "1": 
          name: punctuation.definition.comment.ruby
      match: (?<=^|\s)(#)\s[[a-zA-Z0-9,. \t?!-][^\x{00}-\x{7F}]]*$
uuid: B269B8F3-3A6D-4169-9E70-DD89A679416A
patterns: 
- name: keyword.other.step.cucumber
  match: \b(GivenScenario|Given|When|Then)\b
- comment: string after a Cucumber keyword
  begin: \b(?<=GivenScenario|Given|When|Then) (")
  captures: 
    "1": 
      name: string.quoted.ruby
    "2": 
      name: punctuation.definition.string.ruby
  end: ((\1))
  contentName: string.quoted.step.cucumber.classic.ruby
  patterns: 
  - include: "#regex_sub"
- comment: string after a Cucumber keyword
  begin: \b(?<=GivenScenario|Given|When|Then) (')
  captures: 
    "1": 
      name: string.quoted.ruby
    "2": 
      name: punctuation.definition.string.ruby
  end: ((\1))
  contentName: string.quoted.step.cucumber.classic.ruby
  patterns: 
  - include: "#regex_sub"
- comment: regular expression after a Cucumber keyword
  begin: \b(?<=GivenScenario|Given|When|Then) (/)
  captures: 
    "1": 
      name: string.regexp.classic.ruby
    "2": 
      name: punctuation.definition.string.ruby
  end: ((/[eimnosux]*))
  contentName: string.regexp.step.cucumber.classic.ruby
  patterns: 
  - include: "#regex_sub"
- comment: regular expression after a Cucumber keyword
  begin: \b(?<=GivenScenario|Given|When|Then) (%r{)
  captures: 
    "1": 
      name: string.regexp.mod-r.ruby
    "2": 
      name: punctuation.definition.string.ruby
  end: ((}[eimnosux]*))
  contentName: string.regexp.step.cucumber.mod-r.ruby
  patterns: 
  - include: "#regex_sub"
- include: source.ruby
fileTypes: 
- steps.rb
